---
alwaysApply: true
---

# Tech Stack & Best Practices

## **Core Framework Stack**

### **Next.js 15.2.4** (App Router)
- **✅ Latest Version**: Using cutting-edge features
- **Server Components**: Prefer server components by default, use `"use client"` only when necessary
- **App Router**: All routes in `app/` directory with `page.tsx`, `layout.tsx`, `loading.tsx` patterns
- **Best Practices**:
  - Use Server Components for data fetching and static content
  - Client Components only for interactivity (forms, event handlers, browser APIs)
  - Leverage built-in optimization (Image, Link, Font optimization)
  - Use `metadata` API for SEO instead of `next/head`

### **React 19**
- **✅ Latest Version**: Includes concurrent features, automatic batching, and new hooks
- **⚠️ Peer Dependency Management**: Always use `--legacy-peer-deps` flag for npm installs
- **Best Practices**:
  - Use `useActionState` for form state management
  - Leverage `use()` hook for promises and context
  - Prefer `startTransition` for non-urgent updates
  - Use `useDeferredValue` for expensive calculations

### **TypeScript 5**
- **✅ Latest Version**: Advanced type inference and performance improvements
- **Best Practices**:
  - Use `satisfies` operator for better type checking
  - Leverage template literal types for string patterns
  - Use `const` assertions for immutable data
  - Prefer interfaces over types for object shapes

## **Backend & Data Layer**

### **Supabase JS 2.50.3**
- **✅ Latest Stable**: Full-stack backend as a service
- **Best Practices**:
  - Use Server Components for initial data fetching
  - Implement Row Level Security (RLS) policies
  - Use TypeScript types generated from database schema
  - Leverage real-time subscriptions for live updates

### **Upstash Redis 1.35.1**
- **✅ Edge-Compatible**: Serverless Redis for caching and sessions
- **Best Practices**:
  - Use for session storage and caching
  - Implement proper error handling for Redis failures
  - Use Redis for rate limiting and analytics
  - Leverage edge-compatible client for global performance

## **Styling & UI Architecture**

### **Tailwind CSS 3.4.17**
- **✅ Latest Version**: Modern CSS-in-JS alternative with JIT compilation
- **Best Practices**:
  - Use `@apply` sparingly, prefer utility classes
  - Leverage CSS variables for theming
  - Use arbitrary values `[value]` for one-off styles
  - Configure in `tailwind.config.ts` for design system consistency

### **Shadcn/UI + Radix UI Foundation**
- **Component Architecture**: Unstyled Radix primitives + Tailwind styling
- **Complete Component Library**: 25+ Radix UI components installed
- **Installed Components**:
  - **Layout**: Accordion, Aspect Ratio, Collapsible, Separator, Tabs
  - **Navigation**: Context Menu, Dropdown Menu, Hover Card, Menubar, Navigation Menu
  - **Forms**: Checkbox, Label, Radio Group, Select, Slider, Switch, Toggle, Toggle Group
  - **Feedback**: Alert Dialog, Progress, Toast, Tooltip
  - **Overlays**: Dialog, Popover
  - **Utilities**: Avatar, Scroll Area, Slot
- **Best Practices**:
  - Always use components from `components/ui/` directory
  - Customize via CVA (Class Variance Authority) variants
  - Maintain accessibility attributes from Radix
  - Use `cn()` utility for conditional class merging

```typescript
// ✅ DO: Use shadcn/ui components
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"

// ✅ DO: Use CVA for variants
const buttonVariants = cva("base-classes", {
  variants: {
    variant: {
      default: "default-classes",
      outline: "outline-classes"
    }
  }
})

// ❌ DON'T: Style Radix components directly
import * as Dialog from "@radix-ui/react-dialog"
```

### **Additional UI Libraries**
- **`vaul` 0.9.6**: Drawer component for mobile-first interfaces
- **`sonner` 1.7.1**: Beautiful toast notifications
- **`input-otp` 1.4.1**: OTP input component
- **`cmdk` 1.0.4**: Command palette and search interface
- **`embla-carousel-react` 8.5.1**: Carousel component
- **`react-resizable-panels` 2.1.7**: Resizable panel layouts

### **Utility Libraries**
- **`clsx` 2.1.1**: Conditional class names
- **`tailwind-merge` 2.5.5**: Merge conflicting Tailwind classes
- **`class-variance-authority` 0.7.1**: Component variants with type safety
- **`tailwindcss-animate` 1.0.7**: Tailwind CSS animations

## **Form Handling**

### **React Hook Form 7.54.1 + Zod 3.24.1**
- **✅ Modern Stack**: Performant forms with type-safe validation
- **Supporting Library**: `@hookform/resolvers` 3.9.1
- **Best Practices**:
  - Use `@hookform/resolvers/zod` for schema validation
  - Leverage `Controller` for complex UI components
  - Use `watch` sparingly to avoid re-renders
  - Implement server actions for form submission

```typescript
// ✅ DO: Type-safe form with Zod
const formSchema = z.object({
  email: z.string().email(),
  password: z.string().min(8)
})

const form = useForm<z.infer<typeof formSchema>>({
  resolver: zodResolver(formSchema)
})

// ✅ DO: Use with shadcn/ui Form components
<Form {...form}>
  <FormField
    control={form.control}
    name="email"
    render={({ field }) => (
      <FormItem>
        <FormLabel>Email</FormLabel>
        <FormControl>
          <Input {...field} />
        </FormControl>
        <FormMessage />
      </FormItem>
    )}
  />
</Form>
```

## **Data Visualization**

### **Recharts 2.15.0**
- **✅ Stable Version**: React-based charting library
- **Best Practices**:
  - Use `ResponsiveContainer` for responsive charts
  - Implement loading states for chart data
  - Use Tailwind classes for chart theming
  - Leverage `recharts` with `components/ui/chart.tsx` wrapper

## **Icons & Assets**

### **Lucide React 0.454.0**
- **✅ Latest Version**: Modern icon library with tree-shaking
- **Best Practices**:
  - Import individual icons to optimize bundle size
  - Use consistent icon sizing (16px, 20px, 24px)
  - Apply Tailwind classes for styling

```typescript
// ✅ DO: Import specific icons
import { ChevronDown, User, Settings } from "lucide-react"

// ❌ DON'T: Import entire library
import * as Icons from "lucide-react"
```

## **State Management & Utilities**

### **Date Handling**
- **`date-fns`**: Modern date utility library (using "latest")
- **`react-day-picker`**: Calendar component (using "latest")
- **Best Practices**:
  - Use `date-fns` for date formatting and manipulation
  - Leverage `format`, `isAfter`, `isBefore` functions
  - Handle timezone considerations

### **Theme Management**
- **`next-themes` 0.4.4**: Theme switching with SSR support
- **Best Practices**:
  - Use `useTheme` hook for theme state
  - Implement theme toggle with system preference detection
  - Use CSS variables for theme-aware styling

## **Development Tools**

### **Code Quality & Formatting**
- **Husky 9.1.7**: Git hooks for pre-commit checks
- **Prettier 3.6.2**: Code formatting with consistent style
- **ESLint 9.30.1**: Next.js recommended configuration
- **Best Practices**:
  - Configure pre-commit hooks for code quality
  - Use Prettier for consistent formatting
  - Leverage ESLint rules for catching bugs

### **Build Tools**
- **PostCSS 8.5**: CSS processing with autoprefixer 10.4.20
- **TypeScript 5**: Strict mode enabled
- **dotenv 17.0.1**: Environment variable management

## **React 19 Compatibility**

### **⚠️ Critical Installation Requirements**
- **Always use `--legacy-peer-deps` flag** when installing npm packages
- **Reason**: React 19 has peer dependency conflicts with some packages
- **Required for all npm install commands**:
  ```bash
  # ✅ DO: Always use legacy peer deps
  npm install package-name --legacy-peer-deps
  npm install --save-dev package-name --legacy-peer-deps
  
  # ❌ DON'T: Install without the flag (will cause ERESOLVE errors)
  npm install package-name
  ```

### **Compatible Libraries**
- ✅ Next.js 15.2.4 (Full React 19 support)
- ✅ All Radix UI components (v1.x series)
- ✅ React Hook Form 7.54.1
- ✅ Zod 3.24.1
- ✅ Supabase JS 2.50.3
- ✅ Upstash Redis 1.35.1

## **Performance & Optimization**

### **Bundle Optimization**
- **Tree Shaking**: Import only used functions/components
- **Code Splitting**: Use dynamic imports for heavy components
- **Image Optimization**: Use Next.js `Image` component

## **Version Management Notes**

### **⚠️ Attention Required**
- **`@radix-ui/react-slot`**: Using `"latest"` - should pin to specific version
- **`date-fns`**: Using `"latest"` - should pin to specific version
- **`react-day-picker`**: Using `"latest"` - should pin to specific version

### **Recommended Actions**
```bash
# Pin loose versions for production stability
npm install @radix-ui/react-slot@^1.1.0 date-fns@^3.6.0 react-day-picker@^8.10.0 --legacy-peer-deps
```

## **Architecture Patterns**

### **Component Organization**
```
components/
├── ui/           # Shadcn/UI components (25+ components)
├── icons.tsx     # Custom icon components
└── feature/      # Feature-specific components
```

### **Library Integration**
```
lib/
├── supabase.ts   # Supabase client configuration
├── redis.ts      # Upstash Redis client
└── utils.ts      # Utility functions (cn, etc.)
```

### **Styling Patterns**
- Use `cn()` utility for conditional classes
- Implement design system via Tailwind config
- Use CSS variables for dynamic theming
- Prefer composition over inheritance

### **Type Safety**
- Use Zod for runtime validation
- Leverage TypeScript strict mode
- Implement proper error boundaries
- Use generic types for reusable components

## **Key Takeaways**

1. **Comprehensive Stack**: Modern React 19 + Next.js 15.2.4 with full-stack capabilities
2. **Rich UI Library**: 25+ Radix UI components + additional specialized UI libraries
3. **Type Safety**: Full TypeScript integration with Zod validation
4. **Backend Ready**: Supabase for database/auth + Redis for caching
5. **Production Ready**: Proper tooling with Husky, Prettier, and ESLint
6. **React 19 Compatibility**: Always use `--legacy-peer-deps` for installations

This stack provides a modern, performant, and maintainable foundation for React applications with excellent developer experience and production-ready features.

- Implement proper error boundaries
- Use generic types for reusable components

This stack provides a modern, performant, and maintainable foundation for React applications with excellent developer experience and production-ready features.
# Tech Stack & Best Practices

## **Core Framework Stack**

### **Next.js 15.2.4** (App Router)
- **✅ Latest Version**: Using cutting-edge features
- **Server Components**: Prefer server components by default, use `"use client"` only when necessary
- **App Router**: All routes in `app/` directory with `page.tsx`, `layout.tsx`, `loading.tsx` patterns
- **Best Practices**:
  - Use Server Components for data fetching and static content
  - Client Components only for interactivity (forms, event handlers, browser APIs)
  - Leverage built-in optimization (Image, Link, Font optimization)
  - Use `metadata` API for SEO instead of `next/head`

### **React 19**
- **✅ Latest Version**: Includes concurrent features, automatic batching, and new hooks
- **⚠️ Peer Dependency Management**: Always use `--legacy-peer-deps` flag for npm installs
- **Best Practices**:
  - Use `useActionState` for form state management
  - Leverage `use()` hook for promises and context
  - Prefer `startTransition` for non-urgent updates
  - Use `useDeferredValue` for expensive calculations

### **TypeScript 5**
- **✅ Latest Version**: Advanced type inference and performance improvements
- **Best Practices**:
  - Use `satisfies` operator for better type checking
  - Leverage template literal types for string patterns
  - Use `const` assertions for immutable data
  - Prefer interfaces over types for object shapes

## **Backend & Data Layer**

### **Supabase JS 2.50.3**
- **✅ Latest Stable**: Full-stack backend as a service
- **Best Practices**:
  - Use Server Components for initial data fetching
  - Implement Row Level Security (RLS) policies
  - Use TypeScript types generated from database schema
  - Leverage real-time subscriptions for live updates

### **Upstash Redis 1.35.1**
- **✅ Edge-Compatible**: Serverless Redis for caching and sessions
- **Best Practices**:
  - Use for session storage and caching
  - Implement proper error handling for Redis failures
  - Use Redis for rate limiting and analytics
  - Leverage edge-compatible client for global performance

## **Styling & UI Architecture**

### **Tailwind CSS 3.4.17**
- **✅ Latest Version**: Modern CSS-in-JS alternative with JIT compilation
- **Best Practices**:
  - Use `@apply` sparingly, prefer utility classes
  - Leverage CSS variables for theming
  - Use arbitrary values `[value]` for one-off styles
  - Configure in `tailwind.config.ts` for design system consistency

### **Shadcn/UI + Radix UI Foundation**
- **Component Architecture**: Unstyled Radix primitives + Tailwind styling
- **Complete Component Library**: 25+ Radix UI components installed
- **Installed Components**:
  - **Layout**: Accordion, Aspect Ratio, Collapsible, Separator, Tabs
  - **Navigation**: Context Menu, Dropdown Menu, Hover Card, Menubar, Navigation Menu
  - **Forms**: Checkbox, Label, Radio Group, Select, Slider, Switch, Toggle, Toggle Group
  - **Feedback**: Alert Dialog, Progress, Toast, Tooltip
  - **Overlays**: Dialog, Popover
  - **Utilities**: Avatar, Scroll Area, Slot
- **Best Practices**:
  - Always use components from `components/ui/` directory
  - Customize via CVA (Class Variance Authority) variants
  - Maintain accessibility attributes from Radix
  - Use `cn()` utility for conditional class merging

```typescript
// ✅ DO: Use shadcn/ui components
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"

// ✅ DO: Use CVA for variants
const buttonVariants = cva("base-classes", {
  variants: {
    variant: {
      default: "default-classes",
      outline: "outline-classes"
    }
  }
})

// ❌ DON'T: Style Radix components directly
import * as Dialog from "@radix-ui/react-dialog"
```

### **Additional UI Libraries**
- **`vaul` 0.9.6**: Drawer component for mobile-first interfaces
- **`sonner` 1.7.1**: Beautiful toast notifications
- **`input-otp` 1.4.1**: OTP input component
- **`cmdk` 1.0.4**: Command palette and search interface
- **`embla-carousel-react` 8.5.1**: Carousel component
- **`react-resizable-panels` 2.1.7**: Resizable panel layouts

### **Utility Libraries**
- **`clsx` 2.1.1**: Conditional class names
- **`tailwind-merge` 2.5.5**: Merge conflicting Tailwind classes
- **`class-variance-authority` 0.7.1**: Component variants with type safety
- **`tailwindcss-animate` 1.0.7**: Tailwind CSS animations

## **Form Handling**

### **React Hook Form 7.54.1 + Zod 3.24.1**
- **✅ Modern Stack**: Performant forms with type-safe validation
- **Supporting Library**: `@hookform/resolvers` 3.9.1
- **Best Practices**:
  - Use `@hookform/resolvers/zod` for schema validation
  - Leverage `Controller` for complex UI components
  - Use `watch` sparingly to avoid re-renders
  - Implement server actions for form submission

```typescript
// ✅ DO: Type-safe form with Zod
const formSchema = z.object({
  email: z.string().email(),
  password: z.string().min(8)
})

const form = useForm<z.infer<typeof formSchema>>({
  resolver: zodResolver(formSchema)
})

// ✅ DO: Use with shadcn/ui Form components
<Form {...form}>
  <FormField
    control={form.control}
    name="email"
    render={({ field }) => (
      <FormItem>
        <FormLabel>Email</FormLabel>
        <FormControl>
          <Input {...field} />
        </FormControl>
        <FormMessage />
      </FormItem>
    )}
  />
</Form>
```

## **Data Visualization**

### **Recharts 2.15.0**
- **✅ Stable Version**: React-based charting library
- **Best Practices**:
  - Use `ResponsiveContainer` for responsive charts
  - Implement loading states for chart data
  - Use Tailwind classes for chart theming
  - Leverage `recharts` with `components/ui/chart.tsx` wrapper

## **Icons & Assets**

### **Lucide React 0.454.0**
- **✅ Latest Version**: Modern icon library with tree-shaking
- **Best Practices**:
  - Import individual icons to optimize bundle size
  - Use consistent icon sizing (16px, 20px, 24px)
  - Apply Tailwind classes for styling

```typescript
// ✅ DO: Import specific icons
import { ChevronDown, User, Settings } from "lucide-react"

// ❌ DON'T: Import entire library
import * as Icons from "lucide-react"
```

## **State Management & Utilities**

### **Date Handling**
- **`date-fns`**: Modern date utility library (using "latest")
- **`react-day-picker`**: Calendar component (using "latest")
- **Best Practices**:
  - Use `date-fns` for date formatting and manipulation
  - Leverage `format`, `isAfter`, `isBefore` functions
  - Handle timezone considerations

### **Theme Management**
- **`next-themes` 0.4.4**: Theme switching with SSR support
- **Best Practices**:
  - Use `useTheme` hook for theme state
  - Implement theme toggle with system preference detection
  - Use CSS variables for theme-aware styling

## **Development Tools**

### **Code Quality & Formatting**
- **Husky 9.1.7**: Git hooks for pre-commit checks
- **Prettier 3.6.2**: Code formatting with consistent style
- **ESLint 9.30.1**: Next.js recommended configuration
- **Best Practices**:
  - Configure pre-commit hooks for code quality
  - Use Prettier for consistent formatting
  - Leverage ESLint rules for catching bugs

### **Build Tools**
- **PostCSS 8.5**: CSS processing with autoprefixer 10.4.20
- **TypeScript 5**: Strict mode enabled
- **dotenv 17.0.1**: Environment variable management

## **React 19 Compatibility**

### **⚠️ Critical Installation Requirements**
- **Always use `--legacy-peer-deps` flag** when installing npm packages
- **Reason**: React 19 has peer dependency conflicts with some packages
- **Required for all npm install commands**:
  ```bash
  # ✅ DO: Always use legacy peer deps
  npm install package-name --legacy-peer-deps
  npm install --save-dev package-name --legacy-peer-deps
  
  # ❌ DON'T: Install without the flag (will cause ERESOLVE errors)
  npm install package-name
  ```

### **Compatible Libraries**
- ✅ Next.js 15.2.4 (Full React 19 support)
- ✅ All Radix UI components (v1.x series)
- ✅ React Hook Form 7.54.1
- ✅ Zod 3.24.1
- ✅ Supabase JS 2.50.3
- ✅ Upstash Redis 1.35.1

## **Performance & Optimization**

### **Bundle Optimization**
- **Tree Shaking**: Import only used functions/components
- **Code Splitting**: Use dynamic imports for heavy components
- **Image Optimization**: Use Next.js `Image` component

## **Version Management Notes**

### **⚠️ Attention Required**
- **`@radix-ui/react-slot`**: Using `"latest"` - should pin to specific version
- **`date-fns`**: Using `"latest"` - should pin to specific version
- **`react-day-picker`**: Using `"latest"` - should pin to specific version

### **Recommended Actions**
```bash
# Pin loose versions for production stability
npm install @radix-ui/react-slot@^1.1.0 date-fns@^3.6.0 react-day-picker@^8.10.0 --legacy-peer-deps
```

## **Architecture Patterns**

### **Component Organization**
```
components/
├── ui/           # Shadcn/UI components (25+ components)
├── icons.tsx     # Custom icon components
└── feature/      # Feature-specific components
```

### **Library Integration**
```
lib/
├── supabase.ts   # Supabase client configuration
├── redis.ts      # Upstash Redis client
└── utils.ts      # Utility functions (cn, etc.)
```

### **Styling Patterns**
- Use `cn()` utility for conditional classes
- Implement design system via Tailwind config
- Use CSS variables for dynamic theming
- Prefer composition over inheritance

### **Type Safety**
- Use Zod for runtime validation
- Leverage TypeScript strict mode
- Implement proper error boundaries
- Use generic types for reusable components

## **Key Takeaways**

1. **Comprehensive Stack**: Modern React 19 + Next.js 15.2.4 with full-stack capabilities
2. **Rich UI Library**: 25+ Radix UI components + additional specialized UI libraries
3. **Type Safety**: Full TypeScript integration with Zod validation
4. **Backend Ready**: Supabase for database/auth + Redis for caching
5. **Production Ready**: Proper tooling with Husky, Prettier, and ESLint
6. **React 19 Compatibility**: Always use `--legacy-peer-deps` for installations

This stack provides a modern, performant, and maintainable foundation for React applications with excellent developer experience and production-ready features.

- Implement proper error boundaries
- Use generic types for reusable components

This stack provides a modern, performant, and maintainable foundation for React applications with excellent developer experience and production-ready features.
